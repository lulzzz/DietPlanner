@using DietPlanning.NSGA
@model DietPlanning.NSGA.NsgaLog
@{
    ViewBag.Title = "Log";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Log</h2>

@Scripts.Render("~/bundles/chart")

<canvas id="macroChart" width="400" height="200"></canvas>
<canvas id="prepTimeChart" width="400" height="200"></canvas>
<canvas id="costChart" width="400" height="200"></canvas>
<canvas id="frontsChart" width="400" height="200"></canvas>

<script>
 var labels = [];
  var fronts = [];
  var macro = [];
  var cost = [];
  var prepTime = [];

  @for (int i = 0; i < Model.FrontsNumberLog.Count; i++)
  {
    @:labels.push("@i");
            }


  @foreach (var frontNumLog in Model.FrontsNumberLog)
{
   @:fronts.push(@frontNumLog);
        }

  @foreach (var objLog in Model.ObjectiveLogs.Where(log => log.ObjectiveType == ObjectiveType.Macro))
  {
    @:macro.push(@objLog.ObjectiveValue.ToString().Replace(',','.'));
          }

  @foreach (var objLog in Model.ObjectiveLogs.Where(log => log.ObjectiveType == ObjectiveType.Cost))
  {
    @:cost.push(@objLog.ObjectiveValue.ToString().Replace(',','.'));
      }
  @foreach (var objLog in Model.ObjectiveLogs.Where(log => log.ObjectiveType == ObjectiveType.PreparationTime))
  {
    @:prepTime.push(@(objLog.ObjectiveValue.ToString().Replace(',','.')));
  }

  function CreateData(data, label) {
    return {
      labels: labels,
      datasets: [
        {
          label: label,
          fill: false,
          lineTension: 0.0,
          backgroundColor: "rgba(75,192,192,0.4)",
          borderColor: "rgba(75,192,192,1)",
          borderCapStyle: 'butt',
          borderDash: [],
          borderDashOffset: 0.0,
          borderJoinStyle: 'miter',
          pointBorderColor: "rgba(75,192,192,1)",
          pointBackgroundColor: "#fff",
          pointBorderWidth: 1,
          pointHoverRadius: 5,
          pointHoverBackgroundColor: "rgba(75,192,192,1)",
          pointHoverBorderColor: "rgba(220,220,220,1)",
          pointHoverBorderWidth: 2,
          pointRadius: 1,
          pointHitRadius: 10,
          data: data,
          spanGaps: false
        }
      ]
    };
}

  var macroChart = new Chart($("#macroChart"), {
    type: 'line',
    data: CreateData(macro, "Macro")
  });

  var macroChart = new Chart($("#prepTimeChart"), {
    type: 'line',
    data: CreateData(prepTime, "Perparation Time")
  });
  
  var macroChart = new Chart($("#costChart"), {
    type: 'line',
    data: CreateData(cost, "Cost")
  });

  var macroChart = new Chart($("#frontsChart"), {
    type: 'line',
    data: CreateData(fronts, "Fronts")
  });

</script>